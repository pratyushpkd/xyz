package com.capgemini.mobpur.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.capgemini.mobpur.bean.MobileBean;
import com.capgemini.mobpur.exception.MobilePurchaseException;
import com.capgemini.mobpur.util.DBConnection;

public class MobileDAOImpl implements IMobileDAO {

	@Override
	public boolean updateMobile(int mobileId, int quantity)
			throws MobilePurchaseException {
		int records = 0;
		boolean isUpdated = false;
		
		try(Connection connMobile  = DBConnection.getInstance().getConnection();	
		
		PreparedStatement preparedStatement=
		connMobile.prepareStatement(QueryMapperMobile.UPDATE_MOBILES);
	){
		
		preparedStatement.setInt(1, quantity);
		preparedStatement.setInt(2, mobileId);
		
		records = preparedStatement.executeUpdate();
		if(records>0){
			isUpdated = true;
		}
		
	}catch(SQLException sqlEx){
		throw new MobilePurchaseException(sqlEx.getMessage());
	}
	return isUpdated;
	}

	@Override
	public List<MobileBean> viewAll() throws MobilePurchaseException {
		int records = 0;
		boolean isUpdated = false;
		List<MobileBean>mobileList = new ArrayList<MobileBean>();
		
		try(Connection connMobile  = DBConnection.getInstance().getConnection();	
		
		PreparedStatement preparedStatement=
		connMobile.prepareStatement(QueryMapperMobile.VIEW_MOBILES);
		ResultSet rsMobiles = preparedStatement.executeQuery();
	){
		
		while(rsMobiles.next()){
			MobileBean mobile = new MobileBean();
			
			mobile.setMobileId(rsMobiles.getInt("mobileId"));
			mobile.setName(rsMobiles.getString("name"));
			mobile.setPrice(rsMobiles.getFloat("price"));
			mobile.setQuantity(rsMobiles.getString("quantity"));
			
			mobileList.add(mobile);
		}
	}catch(SQLException sqlEx){
		throw new MobilePurchaseException(sqlEx.getMessage());
	}
	return mobileList;
	}

	@Override
	public boolean deleteMobile(int mobileId) throws MobilePurchaseException {
		int records = 0;
		boolean isDeleted = false;
		
		try(Connection connMobile  = DBConnection.getInstance().getConnection();	
		
		PreparedStatement preparedStatement=
		connMobile.prepareStatement(QueryMapperMobile.DELETE_MOBILES);
	){
		
		preparedStatement.setInt(1, mobileId);
		
		records = preparedStatement.executeUpdate();
		if(records>0){
			isDeleted = true;
		}
		
	}catch(SQLException sqlEx){
		throw new MobilePurchaseException(sqlEx.getMessage());
	}
	return isDeleted;
	}

	@Override
	public List<MobileBean> search(float minPrice, float maxPrice)
			throws MobilePurchaseException {
		// TODO Auto-generated method stub
		return null;
	}

}
